#!/bin/bash
#   Copyright 2017 bin jin
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Framework:
#
#     If the function names conform to the specifications:
#         External call function.
#         Error handling.
#         Display help information.
#         Print the functions list.
#
#     e.g.
#         ### [brief_introduction] #[description_1] #[description_1]
#         [script_name]_[function_name](){
#             ...
#             [function_body]
#             '''
#             # exit and display [error_description]
#             exit 1; # [error_description]
#             '''
#             # return false status
#             return 1
#         }

### Get docker tags #Usage: tags [image_name]
_3rd_tags() {
    [ "$1" ] || exit 1; # args is empty
    local tags=`curl https://index.docker.io/v1/repositories/$1/tags 2>/dev/null`;
    tags=${tags/\}]/};
    tags=${tags//\"/};
    printf "${tags//\},/$IFS}" | sed "s/,//g" | awk '{print $2" '$1':"$4}'
    return 0
}

### VirtualBox Manage (Not complete) #Usage: vbox [start|stop|stopall]
_3rd_vbox() {
    [ -f /Applications/VirtualBox.app\Contents\MacOS\VBoxManage ] || exit 1; # need install VirtualBox
    return 0
}

### Docker batch command #Usage: dockers [start/stop]
_3rd_dockers() {
    which docker >/dev/null 2>&1 || exit 1; # docker client command not found
    case $1 in
        start|star|sta)
            docker ps -f status=exited | awk 'NR>1 {print "docker start " $1 | "sh"}'
        ;;
        stop|sto)
            docker ps | awk 'NR>1 {print "docker stop " $1 | "sh"}'
        ;;
        "")
            exit 1; # args is empty
        ;;
        # *)
        # ;;
    esac;
    return 0
}

# ### Camouflage to VDISK for boot2docker #Usage: camvd [remote_login_info]
# _3rd_camvd() {
#     ssh $@ <<-SH
# ver=\`uname -r\`;
# [ "\${ver#*-}" == "boot2docker" ] || exit;
# # sudo dd if=/dev/zero of=/dev/sda bs=1k count=256
# UNPARTITIONED_HD=\`fdisk -l | grep "doesn't contain a valid partition table" | head -n 1 | sed 's/Disk \(.*\) doesn.*/\1/'\`;
# DISK_VENDOR=\$(cat /sys/class/block/\$(basename \$UNPARTITIONED_HD /dev/)/device/vendor /sys/class/block/\$(basename \$UNPARTITIONED_HD /dev/)/device/model | tr -d "\n");
# sudo sed -i "s/VMware, VMware Virtual S/\$DISK_VENDOR/g;s/1000M/\`free -m | grep Mem | awk '{print \$2}'\`M/g;s/ext4 -L/ext4 -i 8192 -L/g" /etc/rc.d/automount;
# sudo sh /etc/rc.d/automount;
# sudo reboot;
# SH

# }

### Convert alac,ape,m4a,tta,tak,wav to flac format #Goto workdir and exec cflac command
_3rd_cflac() {
    which ffmpeg >/dev/null 2>&1 || exit 1; # ffmpeg command not found
    [ "`uname`" == "Linux" ] && {
        find -type f -iregex ".*\.\(alac\|ape\|m4a\|tta\|tak\|wav\)" -exec ffmpeg -i {} -acodec flac {}.flac \; || :
    } || {
        :
    }
    return 0
}

### Play all multi-media in directory #Usage: ffplay [[depth]] [path] [[audio_specifier]]
_3rd_ffplay() {
    which ffplay >/dev/null 2>&1 || exit 1; # ffplay command not found
    which lib >/dev/null 2>&1 || exit 1; # lib command not found
    local depth l stream_specifier;
    lib inum $1 && {
        depth="-d $1";
        shift
    };
    [ ! -f "$1" -a ! -d "$1" ] && exit 1; # path not found
    # -ast stream_specifier  #select desired audio stream
    lib inum $2 && stream_specifier="-ast $2";
    [ -d "$1" ] && {
        while read l; do
            _ffplay "$l"
        done < <(find "$1" $depth -type f -name "*.*" | sort);
        :
    } || {
        _ffplay "$1"
    }
}

_ffplay() {
    case "`lib low ${1##*.}`" in
        avi | divx | flv | mkv | mp4 | mpg | rm | rmvb | wmv)
            # -ac 2 #ED..A... set number of audio channels (from 0 to INT_MAX) (default 0) #Convert the 5.1 track to stereo
            # -sn #disable subtitling
            ffplay $stream_specifier -ac 2 -sn -autoexit "$1";
        ;;
        alac | ape | flac | m4a | mp3 | ogg | tta | tak | wav | wma)
            ffplay -nodisp -autoexit "$1";
        ;;
        *)
            :
        ;;
    esac
}

### List camera device
_3rd_lcam() {
    which ffmpeg >/dev/null 2>&1 || exit 1; # ffmpeg command not found
    local dev
    [ "`uname`" == "Darwin" ] && dev=avfoundation || dev=x11grab;
    ffmpeg -f $dev -list_devices true -i "" 2>&1 | grep \]
}

### Display camera #Usage: scam [video_id] [audio_id] [[size]]
_3rd_scam() {
    which ffplay >/dev/null 2>&1 || exit 1; # ffplay command not found
    which lib >/dev/null 2>&1 || exit 1; # lib command not found
    lib inum $1 || exit 1; # first args error
    lib inum $2 || exit 1; # secend args error
    local size dev
    case $3 in
        720|"")
            size=1280x720
        ;;
        1080)
            size=1920x1080
        ;;
        # "")
        #     size=1920x1200
        # ;;
        *)
            exit 1; # Args not support
        ;;
    esac
    [ "`uname`" == "Darwin" ] && dev=avfoundation || dev=x11grab;

    # Supported pixel formats:
    #     uyvy422
    #     yuyv422
    #     nv12
    #     0rgb
    #     bgr0

    ffplay -f $dev -video_size $size -framerate 25 -pixel_format bgr0 -probesize 20M -i "$1":"$2" 2>&1
    # ffplay -f avfoundation -video_size 1280x720 -framerate 25 -pixel_format 0rgb -probesize 10M -i "XI100DUSB-HDMI":"XI100DUSB-HDMI Audio" 2>&1
}

### Get Download maven file to ~/.m2/repository #Usage: m2 [groupId]/[artifactId][[/version]]
_3rd_m2() {

    local i _ver _m2=$@;

    [ "http" != "${_m2:0:4}" -a "${_m2}" -a "${_m2/\//}" != "${_m2}" ] || exit 1; # args error

    # Support -np
    while [ "/" == "${_m2:0-1}" ]; do
        _m2=${_m2:0:-1};
    done;

    _ver=${_m2##*/};
    _m2=${_m2%/*};
    # Replace period to '/'
    _m2=${_m2//\./\/}/${_ver};

    # link target to ~/.m2/repository
    ln -s ~/.m2/repository /tmp/maven2 2>/dev/null || {
        ps -ef | grep wget | grep -q 'repo1.maven.org/maven2' && exit 1 # m2 command is already running
    };

    which wget >/dev/null 2>&1 && {
        # Drop args -m -k
        wget -r -np -nc -nH -R html -e robots=off -P /tmp \
        -U 'Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0' \
        http://repo1.maven.org/maven2/${_m2}/ || :
    } || {
        which curl >/dev/null 2>&1 && {
            # Not support create directory
            mkdir -p /tmp/maven2/${_m2};
            m2_get http://repo1.maven.org/maven2/${_m2}/;
            printf "\nDownloaded: $i files\n"
        } || exit 1; # wget and curl command not found
    };

    # Drop link
    rm -f /tmp/maven2;

    return 0
}

# curl for _3rd_m2
m2_get() {
    local url;
    while read url; do
        [ "/" == "${url:0-1}" ] && {
            # Is directory
            mkdir /tmp/maven2/${1:30}$url;
            m2_get ${1}$url || :;
        } || {
            let ++i; # Count download file
            printf "\nSaving to: /tmp/maven2/${1:30}$url -- ${1}$url\n\n";
            # Not directory
            curl ${1}$url -o /tmp/maven2/${1:30}$url
        };
    done < <(curl ${1}index.html | awk -F "a href=\"" '{printf "%s\n",$2}' | awk -F "\"" '{printf "%s\n",$1}' | grep -vE "^$|^\?|^http:\/\/")

}

### Replace brew source #rewurl [app_name] #
# _3rd_brewurl() {
#     [ "$1" ] || exit 1; # first args is empty
#     grep -r \'$1\' /usr/local/Library/Formula/* 2>/dev/null;
#     echo -e "\nNeed replace like file:///Volume/Data/$1";
#     return 0
# }

# args() {
#     for i in "$@";
#     do
#         case "$i" in
#             --arg.str=*)
#                 echo ${i#*=}
#             ;;
#             -help | --help)
#                 echo arg.str
#             ;;
#             *)
#                 echo --
#             ;;
#         esac;
#     done
# }

#################################################
#                   Framework                   #
# # # # # # # # # # # # # # # # # # # # # # # # #

# Print Error info
func_err() {
    [[ "$4$6" == exit_${0##*/}* ]] && {
        local err=`awk 'NR=='$2'{print}' $0`;
        # Print line text after '#'
        printf "\033[31mError:${err##*#} \033[33m($0:$2)\033[0m\n" >&2;
        exit $(($5 % 256))
    };

    # WARRAN: 0 <= $? <= 255, return 256: $? = 0
    [ "$4" == "return" ] && exit $(($5 % 256));

    # Get script line
    [ $1 == 127 ] && {
        # No function found
        printf "\033[31mError: No function found \033[0m\n" >&2;
        exit 1
    };

    exit 0
}

# Show function info
func_annotation() {
    local i j k OLDIFS IFS=$IFS\({;
    # Cache IFS
    OLDIFS=$IFS;

    [ "$1" ] && {
        # show select
        while read i j; do
            # Make array splite with #
            [ "$i" == "###" ] && {
                IFS=#;
                k=($j);
                # Reset IFS
                IFS=$OLDIFS
            };
            # At target func name
            [ "$k" -a "$i" == "_${0##*/}_$1" ] && {
                # Print all annotation
                for i in ${!k[@]}; do
                    printf "${k[$i]}\n";
                done;
                return 0
            };
            # Reset var
            [[ "$i" == _${0##*/}* ]] && [ "$j" == ")" ] && unset k;
        done < "$0"; # Scan this script
        return 1
    } || {
        # show all
        while read i j; do
            # Cache intro
            [ "$i" == "###" ] && k=${j%%#*};
            # At func name
            [ "${i%_*}" == "_${0##*/}" -a "$j" == ")" ] && {
                # Left aligned at 15 char
                printf "%-15s$k\n" ${i##*_};
                # Clear var
                unset k
            };
        done < "$0"; # Scan this script
    }

}

# Cache exit
trap 'func_err $? $LINENO $BASH_LINENO $BASH_COMMAND ${FUNCNAME[@]}' EXIT

# # # # # # # # # # # # # # # # # # # # # # # # #
#                   Framework                   #
#################################################

# Test if help
[[ ! "$1" || "$1" == "-h" || "$1" == "--help" ]] && {
    func_annotation | sort;
    exit 0
} || [[ "$2" == "-h" || "$2" == "--help" ]] && {
    # Test if help
    func_annotation $1 || printf "\033[31mError: No function found \033[0m\n" >&2;
    exit $?
};

# main
_${0##*/}_"$@"
